Y <- unlist(lapply(X, function(x) b0+b1*x))
##############################
#Crea un dataframe cuyas columnas sean X e Y
##############################
df <- data.frame(X,Y)
View(df)
?runif
##################
library(data.table)
library(dplyr)
library(magrittr)
library(ggplot2)
##############################
#Genera un vector "X" de 30 componentes entre 0 y 20
##############################
X <- round(runif(n=30, min=0, max=20))
##############################
#A partir de "X" genera un vector "Y" que siga la ecuación Y = b0 + b1·X ,
#en el que las componentes de la ordenada en el origen y de la pendiente sean elegidas por ti.
##############################
#Dado b0 = 9 y b1 = -3
b0 <- 0.21
b1 <- -3
Y <- unlist(lapply(X, function(x) b0+b1*x))
##############################
#Crea un dataframe cuyas columnas sean X e Y
##############################
df <- data.frame(X,Y)
##############################
#Representa los puntos mediante un diagrama de dispersión con ggplot y geom_point
##############################
ggplot(data=df,aes(X,Y))+
geom_point(color = "firebrick", size = 2) +
labs(title  =  'Diagrama de dispersion', x  =  'X', y = 'Y') +
geom_smooth(method = "lm", se = TRUE, color = "black") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
##############################
# Crea el modelo de regresión lineal para este conjunto de datos. ¿Qué observas?
##############################
modelo_inicial <- lm(data = df, X~Y)
summary(modelo_inicial)
##############################
#Añade una columna "err" al dataframe que sea un vector de 30 números aleatorios
#provenientes de una distribución normal de media cero y desviación típica 3
##############################
df['err'] <- rnorm(30, mean=0, sd=3)
##############################
#Crea en el dataframe una nueva columna, "Y_err", que sea la suma de "Y" y "err".
##############################
df['Y_err'] <- df['Y'] + df['err']
##############################
#Rehace los puntos d y e comentando las diferencias que observas.
##############################
ggplot(data=df,aes(X,Y_err))+
geom_point(color = "firebrick", size = 2) +
labs(title  =  'Diagrama de dispersion', x  =  'X', y = 'Y_err') +
geom_smooth(method = "lm", se = TRUE, color = "black") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
modelo_err <- lm(data = df, X~Y_err)
modelo_err
summary(modelo_err)
Y <- b0+b1*X
##################
library(data.table)
library(dplyr)
library(magrittr)
library(ggplot2)
##############################
#Genera un vector "X" de 30 componentes entre 0 y 20
##############################
X <- round(runif(n=30, min=0, max=20))
##############################
#A partir de "X" genera un vector "Y" que siga la ecuación Y = b0 + b1·X ,
#en el que las componentes de la ordenada en el origen y de la pendiente sean elegidas por ti.
##############################
#Dado b0 = 9 y b1 = -3
b0 <- 0.21
b1 <- -3
Y <- b0+b1*X
##############################
#Crea un dataframe cuyas columnas sean X e Y
##############################
df <- data.frame(X,Y)
##################
library(data.table)
library(dplyr)
library(magrittr)
library(ggplot2)
##############################
#Genera un vector "X" de 30 componentes entre 0 y 20
##############################
X <- round(runif(n=30, min=0, max=20))
#Otra opcion: X <- seq(0,20,length.out=30)
##############################
#A partir de "X" genera un vector "Y" que siga la ecuación Y = b0 + b1·X ,
#en el que las componentes de la ordenada en el origen y de la pendiente sean elegidas por ti.
##############################
#Dado b0 = 9 y b1 = -3
b0 <- 0.21
b1 <- -3
Y <- b0+b1*X
#Y <- unlist(lapply(X, function(x) b0+b1*x))
##############################
#Crea un dataframe cuyas columnas sean X e Y
##############################
df <- data.frame(X,Y)
##############################
#Representa los puntos mediante un diagrama de dispersión con ggplot y geom_point
##############################
ggplot(data=df,aes(X,Y))+
geom_point(color = "firebrick", size = 2) +
labs(title  =  'Diagrama de dispersion', x  =  'X', y = 'Y') +
geom_smooth(method = "lm", se = TRUE, color = "black") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
##############################
#Representa los puntos mediante un diagrama de dispersión con ggplot y geom_point
##############################
ggplot(data=df,aes(X,Y))+
geom_point(color = "firebrick", size = 2) +
geom_line()+
labs(title  =  'Diagrama de dispersion', x  =  'X', y = 'Y') +
geom_smooth(method = "lm", se = TRUE, color = "black") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
##################
library(data.table)
library(dplyr)
library(magrittr)
library(ggplot2)
##############################
#Genera un vector "X" de 30 componentes entre 0 y 20
##############################
X <- round(runif(n=30, min=0, max=20))
#Otra opcion: X <- seq(0,20,length.out=30)
##############################
#A partir de "X" genera un vector "Y" que siga la ecuación Y = b0 + b1·X ,
#en el que las componentes de la ordenada en el origen y de la pendiente sean elegidas por ti.
##############################
#Dado b0 = 9 y b1 = -3
b0 <- 0.21
b1 <- -3
Y <- b0+b1*X
#Y <- unlist(lapply(X, function(x) b0+b1*x))
##############################
#Crea un dataframe cuyas columnas sean X e Y
##############################
df <- data.frame(X,Y)
##############################
#Representa los puntos mediante un diagrama de dispersión con ggplot y geom_point
##############################
ggplot(data=df,aes(X,Y))+
geom_point(color = "firebrick", size = 2) +
geom_line()+
labs(title  =  'Diagrama de dispersion', x  =  'X', y = 'Y') +
geom_smooth(method = "lm", se = TRUE, color = "black") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
##############################
# Crea el modelo de regresión lineal para este conjunto de datos. ¿Qué observas?
##############################
modelo_inicial <- lm(data = df, X~Y)
summary(modelo_inicial)
##############################
#Añade una columna "err" al dataframe que sea un vector de 30 números aleatorios
#provenientes de una distribución normal de media cero y desviación típica 3
##############################
df['err'] <- rnorm(30, mean=0, sd=3)
##############################
#Crea en el dataframe una nueva columna, "Y_err", que sea la suma de "Y" y "err".
##############################
df['Y_err'] <- df['Y'] + df['err']
##############################
#Rehace los puntos d y e comentando las diferencias que observas.
##############################
ggplot(data=df,aes(X,Y_err))+
geom_point(color = "firebrick", size = 2) +
geom_line()+
labs(title  =  'Diagrama de dispersion', x  =  'X', y = 'Y_err') +
geom_smooth(method = "lm", se = TRUE, color = "black") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
modelo_err <- lm(data = df, X~Y_err)
modelo_err
summary(modelo_err)
ggplot(data=df,aes(X,Y_err))+
geom_point(color = "firebrick", size = 2) +
labs(title  =  'Diagrama de dispersion', x  =  'X', y = 'Y_err') +
geom_smooth(method = "lm", se = TRUE, color = "black") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
##############################
#Representa los puntos mediante un diagrama de dispersión con ggplot y geom_point
##############################
ggplot(data=df,aes(X,Y))+
geom_point(color = "firebrick", size = 2) +
geom_line()+
labs(title  =  'Diagrama de dispersion', x  =  'X', y = 'Y') +
geom_smooth(method = "lm", se = TRUE, color = "black") +
scale_color_gradient2(low='red',high='orange')
##############################
#Representa los puntos mediante un diagrama de dispersión con ggplot y geom_point
##############################
ggplot(data=df,aes(X,Y))+
geom_point(color = "firebrick", size = 2) +
geom_line()+
labs(title  =  'Diagrama de dispersion', x  =  'X', y = 'Y') +
geom_smooth(method = "lm", se = TRUE, color = "black") +
scale_color_gradient2(low='red',high='orange')
##############################
#Representa los puntos mediante un diagrama de dispersión con ggplot y geom_point
##############################
ggplot(data=df,aes(X,Y))+
geom_point(color = "firebrick", size = 2) +
geom_line()+
labs(title  =  'Diagrama de dispersion', x  =  'X', y = 'Y') +
geom_smooth(method = "lm") +
scale_color_gradient2(low='red',high='orange')
##############################
#Representa los puntos mediante un diagrama de dispersión con ggplot y geom_point
##############################
ggplot(data=df,aes(X,Y))+
geom_point(color = "firebrick", size = 2) +
geom_line()+
labs(title  =  'Diagrama de dispersion', x  =  'X', y = 'Y') +
geom_smooth(method = "lm") +
scale_color_gradient2(low='red',high='orange')+
theme(legend.position='top')
##############################
#Representa los puntos mediante un diagrama de dispersión con ggplot y geom_point
##############################
ggplot(data=df,aes(X,Y))+
geom_point(color = "firebrick", size = 2) +
geom_line()+
labs(title  =  'Diagrama de dispersion', x  =  'X', y = 'Y') +
geom_smooth(method = "lm") +
scale_color_gradient2(low='red',high='orange')+
theme(legend.position='top')
##############################
# Crea el modelo de regresión lineal para este conjunto de datos. ¿Qué observas?
##############################
modelo_inicial <- lm(data = df, X~Y)
summary(modelo_inicial)
##############################
#Añade una columna "err" al dataframe que sea un vector de 30 números aleatorios
#provenientes de una distribución normal de media cero y desviación típica 3
##############################
df['err'] <- rnorm(nrow(df), mean=0, sd=3)
##############################
#Crea en el dataframe una nueva columna, "Y_err", que sea la suma de "Y" y "err".
##############################
df['Y_err'] <- df['Y'] + df['err']
ggplot(data=df,aes(X,Y_err))+
geom_point(color = "firebrick", size = 2) +
labs(title  =  'Diagrama de dispersion', x  =  'X', y = 'Y_err') +
geom_smooth(method = "lm", se = TRUE, color = "black") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
modelo_err <- lm(data = df, X~Y_err)
df = df %>% transform(Y_err = Y + err)
##############################
#Genera un vector "X" de 30 componentes entre 0 y 20
##############################
X <- round(runif(n=30, min=0, max=20))
#Otra opcion: X <- seq(0,20,length.out=30)
##############################
#A partir de "X" genera un vector "Y" que siga la ecuación Y = b0 + b1·X ,
#en el que las componentes de la ordenada en el origen y de la pendiente sean elegidas por ti.
##############################
#Dado b0 = 9 y b1 = -3
b0 <- 0.21
b1 <- -3
Y <- b0+b1*X
#Y <- unlist(lapply(X, function(x) b0+b1*x))
##############################
#Crea un dataframe cuyas columnas sean X e Y
##############################
df <- data.frame(X,Y)
##############################
#Representa los puntos mediante un diagrama de dispersión con ggplot y geom_point
##############################
ggplot(data=df,aes(X,Y))+
geom_point(color = "firebrick", size = 2) +
geom_line()+
labs(title  =  'Diagrama de dispersion', x  =  'X', y = 'Y') +
geom_smooth(method = "lm") +
scale_color_gradient2(low='red',high='orange')+
theme(legend.position='top')
##############################
# Crea el modelo de regresión lineal para este conjunto de datos. ¿Qué observas?
##############################
modelo_inicial <- lm(data = df, X~Y)
summary(modelo_inicial)
##############################
#Añade una columna "err" al dataframe que sea un vector de 30 números aleatorios
#provenientes de una distribución normal de media cero y desviación típica 3
##############################
#nrow(df) retorna el numero de filas en el df
df['err'] <- rnorm(nrow(df), mean=0, sd=3)
View(df)
##############################
#Crea en el dataframe una nueva columna, "Y_err", que sea la suma de "Y" y "err".
##############################
#df['Y_err'] <- df['Y'] + df['err']
df = df %>% transform(Y_err = Y + err)
ggplot(data=df,aes(X,Y_err))+
geom_point(color = "firebrick", size = 2) +
labs(title  =  'Diagrama de dispersion', x  =  'X', y = 'Y_err') +
geom_smooth(method = "lm", se = TRUE, color = "black") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
##################
library(data.table)
library(dplyr)
library(magrittr)
library(ggplot2)
##############################
#Genera un vector "X" de 30 componentes entre 0 y 20
##############################
#X <- round(runif(n=30, min=0, max=20))
#Otra opcion:
X <- seq(0,20,length.out=30)
##############################
#A partir de "X" genera un vector "Y" que siga la ecuación Y = b0 + b1·X ,
#en el que las componentes de la ordenada en el origen y de la pendiente sean elegidas por ti.
##############################
#Dado b0 = 9 y b1 = -3
b0 <- 0.21
b1 <- -3
Y <- b0+b1*X
#Y <- unlist(lapply(X, function(x) b0+b1*x))
##############################
#Crea un dataframe cuyas columnas sean X e Y
##############################
df <- data.frame(X,Y)
##############################
#Representa los puntos mediante un diagrama de dispersión con ggplot y geom_point
##############################
ggplot(data=df,aes(X,Y))+
geom_point(color = "firebrick", size = 2) +
geom_line()+
labs(title  =  'Diagrama de dispersion', x  =  'X', y = 'Y') +
geom_smooth(method = "lm") +
scale_color_gradient2(low='red',high='orange')+
theme(legend.position='top')
##############################
# Crea el modelo de regresión lineal para este conjunto de datos. ¿Qué observas?
##############################
modelo_inicial <- lm(data = df, X~Y)
summary(modelo_inicial)
##############################
#Añade una columna "err" al dataframe que sea un vector de 30 números aleatorios
#provenientes de una distribución normal de media cero y desviación típica 3
##############################
#nrow(df) retorna el numero de filas en el df
df['err'] <- rnorm(nrow(df), mean=0, sd=3)
##############################
#Crea en el dataframe una nueva columna, "Y_err", que sea la suma de "Y" y "err".
##############################
#df['Y_err'] <- df['Y'] + df['err']
df = df %>% transform(Y_err = Y + err)
##############################
#Rehace los puntos d y e comentando las diferencias que observas.
##############################
ggplot(data=df,aes(X,Y_err))+
geom_point(color = "firebrick", size = 2) +
labs(title  =  'Diagrama de dispersion', x  =  'X', y = 'Y_err') +
geom_smooth(method = "lm", se = TRUE, color = "black") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
modelo_err <- lm(data = df, X~Y_err)
modelo_err
summary(modelo_err)
# situación de workspace en directorio
library(rstudioapi)
# lectura de datos
library(data.table)
library(dplyr)
library(ggfortify)
library(tidyverse)
library(ggplot2)
library(TSA)
library(forecast)
library(tseries)
setwd(dirname(getActiveDocumentContext()$path))
diary_df <- fread("data/SN_d_tot_V2.0.csv",header=TRUE)
yearly_df <- fread("data/SN_y_tot_V2.0.csv",header=TRUE)
#############################################################################
#a) Representar ambas series.
#Representacion de la info diaria
ggplot(data = diary_df,
mapping = aes(x = decimal_year, y = SNvalue))+
ggtitle("Ciclo de actividad del Sol: Promedio Diario de manchas solares")+
geom_point(aes(color=SNvalue))+
geom_line(aes(color=SNvalue))
ggsave("diary_fig.png")
#Representacion de la info anual
ggplot(data = yearly_df,
mapping = aes(x = decimal_year, y = SNvalue))+
ggtitle("Ciclo de actividad del Sol: Promedio Anual de manchas solares")+
geom_point(aes(color=SNvalue))+
geom_line(aes(color=SNvalue))
ggsave("yearly_fig.png")
#############################################################################
#b) Para la serie diaria, convertirla en una serie mensual.
# A ver si me sale
monthly_df <- diary_df %>% group_by(year, month) %>%
summarize(SNvalue=mean(SNvalue),
SNerror=mean(SNerror),
Observations=sum(observations),
.groups = 'drop')
ggplot(data = monthly_df,
mapping = aes(x = year, y = SNvalue))+
ggtitle("Ciclo de actividad del Sol: Promedio Mensual de manchas solares")+
geom_point(aes(color=SNvalue))+
geom_line(aes(color=SNvalue))
ggsave("monthly_fig.png")
#############################################################################
####
#c) Calcular el periodo de actividad solar.
monthly_ts<-ts(monthly_df$SNvalue,start=1818, frequency=12)
peri <- periodogram(monthly_ts)
freqs<-peri$freq
potencia<-peri$spec
DENSIDAD_ESPECTRAL<-data.frame(FREQS=freqs,
PERIODO=(1/(freqs)),
PESO=potencia)
FILTRO<-DENSIDAD_ESPECTRAL %>%
arrange(desc(PESO))
FILTRO %>% head(5)
1/freqs[which.max(potencia)]
#EL PERIODO ES DE 131.57-> 132 meses -> 11 años
#############################################################################
# d) Tómese como conjunto de entrenamiento la serie mensual en el periodo previo a 2020,
#y como conjunto de test el periodo posterior hasta el final de dicha serie.
train <- monthly_df %>% filter(year<2020)
test <- monthly_df %>% filter(year>=2020)
#############################################################################
#e) Realícese el estudio completo de la serie mensual de entrenamiento, comprobando,
#en caso de existir, su tendencia, estacionalidad, ruido.
#Haciendo un plot rapido
plot(train$year, train$SNvalue)
#Tendencia no hay, eso es algo
#Buscamos estacionalidad y ruido
train_ts<-ts(train$SNvalue, start=1818, frequency=12)
train_decom <- stl(train_ts,s.window = "periodic")
autoplot(stl(train_ts,s.window = "periodic"))
#Una tendencua que sigue exactamente a la figura, por lo que no la tocamos
#una estacionalidad altisima.
#Tambien hay ruido que parece seguir un patron
#############################################################################
#f) Determinar si la serie temporal mensual de entrenamiento es estacionaria.
#A primera vista parece ser estacionaria, dado que la evolución de la media y de la varianza no cambian tanto
#a lo largo del tiempo. Tampoco tiene tendencia.
#Pero bueno, me imagino que lo que quiere Jaime es que usemos los test
#Lo primero es quitar la estacionalidad de la serie, para ello diferenciamos sobre la estacionalidad
train_seasonal <- decompose(train_ts)$seasonal
peri <- periodogram(train_seasonal)
freqs<-peri$freq
potencia<-peri$spec
DENSIDAD_ESPECTRAL<-data.frame(FREQS=freqs,
PERIODO=(1/(freqs)),
PESO=potencia)
FILTRO<-DENSIDAD_ESPECTRAL %>%
arrange(desc(PESO))
FILTRO %>% head(5)
#Aqui vemos que el periodo de la estacionalidad es 12
#Quitamos la estacionalidad
D_dif_train_ts<-diff(train_ts,12)
autoplot(D_dif_train_ts)+
geom_line(color="red")+
ylab("DIFF(diff(log($ por acción)),4)")+
ggtitle("Serie transformada: DIFF(diff(log($ por acción)),4)")+
geom_smooth()
ggtsdisplay(D_dif_train_ts)
#Corremos los tests
#1º KPSS Test
kpss.test(D_dif_train_ts)
#Da más de 0.05, por lo que se acepta la H0: La serie es estacionaria
#2º ADF Test
adf.test(D_dif_train_ts)
#Da menos de 0.05, por lo que rechazamos la H0: La serie NO es estacionaia
#Conclusion tras ejecutar los tests:  es estacionaria!
#############################################################################
#TODO (no estoy seguro de si he pillado en cada caso los valores correctos)
#g) Mediante los diagramas ACF y PACF calcular los parámetros (p, d, q) y (P, D, Q)
#para la serie mensual de entrenamiento. Comparar con los resultados obtenidos por un método
#autoarima (paquete forecast en R o pmdarima en Python).
Acf(D_dif_train_ts)
#q<=11 Q<=1
#Se puede ver que hay una correlacion fuerte entre los terminos,
#aunque va descendiendo a medida que pasan los meses
Pacf(D_dif_train_ts)
#Viendo las graficas podemos afirmar que estamos ante un Proceso Autoregresivo (AR).
#En estos casos no podemos determinar la p y la P, únicamente q y Q, las cuales
#valen 1 y 12 respectivamente
mod_arima<-auto.arima(train_ts,
max.q = 0,
max.Q = 0,
max.p = 6,
max.P = 1,
d=0,
D=1,
trace = T,
ic=c("aicc"),
stepwise = T)
Box.test(mod_arima$residuals,type = "Ljung-Box")
checkresiduals(mod_arima)
